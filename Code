// Book class
class Book {
    constructor(title, author, ISBN, isAvailable = true) {
        this.title = title;
        this.author = author;
        this.ISBN = ISBN;
        this._isAvailable = isAvailable;
    }

    getDetails() {
        return `${this.title} by ${this.author}, ISBN: ${this.ISBN}`;
    }

    get isAvailable() {
        return this._isAvailable;
    }

    set isAvailable(status) {
        this._isAvailable = status;
    }
}

// Section class
class Section {
    constructor(name) {
        this.name = name;
        this.books = [];
    }

    addBook(book) {
        this.books.push(book);
    }

    getAvailableBooks() {
        return this.books.filter(book => book.isAvailable).length;
    }

    calculateTotalBooksAvailable() {
        return this.getAvailableBooks();
    }

    listBooks() {
        return this.books.map(book => `${book.title}: ${book.isAvailable ? "Available" : "Borrowed"}`).join('\n');
    }
}

// Patron class
class Patron {
    constructor(name) {
        this.name = name;
        this.borrowedBooks = [];
    }

    borrowBook(book) {
        if (book.isAvailable) {
            book.isAvailable = false;
            this.borrowedBooks.push(book);
            console.log(`${this.name} successfully borrowed "${book.title}".`);
        } else {
            console.log(`Sorry, "${book.title}" is already borrowed.`);
        }
    }

    returnBook(book) {
        const index = this.borrowedBooks.indexOf(book);
        if (index !== -1) {
            this.borrowedBooks.splice(index, 1);
            book.isAvailable = true;
            console.log(`${this.name} returned "${book.title}".`);
        } else {
            console.log(`${this.name} does not have "${book.title}".`);
        }
    }
}

// VIPPatron class that inherits from Patron
class VIPPatron extends Patron {
    constructor(name, priority = true) {
        super(name);
        this.priority = priority;
    }

    borrowBook(book) {
        // VIPs have priority if the book is borrowed by another patron
        if (this.priority) {
            if (!book.isAvailable) {
                console.log(`${this.name} (VIP) gets priority and can borrow "${book.title}".`);
                this.forceBorrowBook(book);  // VIP overrides and borrows the book
            } else {
                super.borrowBook(book);  // If available, borrow as usual
            }
        } else {
            super.borrowBook(book);  // If not VIP, borrow like a regular patron
        }
    }

    // VIP forced borrowing
    forceBorrowBook(book) {
        book.isAvailable = false;
        this.borrowedBooks.push(book);
        console.log(`${this.name} (VIP) borrowed "${book.title}".`);
    }
}


// Create sections
const fiction = new Section("Fiction");
const science = new Section("Science");

// Create books
const book1 = new Book("1984", "George Orwell", "1234567890");
const book2 = new Book("Brave New World", "Aldous Huxley", "0987654321");
const book3 = new Book("The Selfish Gene", "Richard Dawkins", "1122334455");

// Add books to sections
fiction.addBook(book1);
fiction.addBook(book2);
science.addBook(book3);



